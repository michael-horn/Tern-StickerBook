//------------------------------------------------------------------------
// Tern Tangible Programming Language
// Copyright (c) 2011 Michael S. Horn
// 
//           Michael S. Horn (michael.horn@tufts.edu)
//           Northwestern University
//           2120 Campus Drive
//           Evanston, IL 60613
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License (version 2) as
// published by the Free Software Foundation.
// 
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//------------------------------------------------------------------------
%header%

GRAMMARTYPE = "LL"

DESCRIPTION = "Tern Programming Language"

AUTHOR      = "Michael S. Horn"
VERSION     = "1.0"
DATE        = "November 5, 2011"

%tokens%

INDENT         = "{"
DEDENT         = "}"
LEFT_BRACE     = "["
RIGHT_BRACE    = "]"
LEFT_PAREN     = "("
RIGHT_PAREN    = ")"
COLON          = ":"
ASSIGN         = "="
COMMA          = ","

IMPORT         = "import"
IF             = "if"
DEF            = "def"
PROCESS        = "process"
WHILE          = "while"


//-------------------------------------------------------------
// Built-in commands
//-------------------------------------------------------------
WAIT           = "wait"
PRINT          = "print"
TRACE          = "trace"
RAND           = "rand"
START          = "start"
STOP           = "stop"

//-------------------------------------------------------------
// Relational operators
//-------------------------------------------------------------
LESS_THAN        = "<"
LESS_THAN_EQ     = "<="
GREATER_THAN     = ">"
GREATER_THAN_EQ  = ">="
NOT_EQUAL        = "!="
EQUAL            = "=="

//-------------------------------------------------------------
// Numeric operators
//-------------------------------------------------------------
ADD            = "+"
SUB            = "-"
MUL            = "*"
DIV            = "/"
RANDOM         = "random"

//-------------------------------------------------------------
// Boolean Operators
//-------------------------------------------------------------
OR             = "or"
NOT            = "not"
AND            = "and"

//-------------------------------------------------------------
// Literals
//-------------------------------------------------------------
TRUE           = "true"
FALSE          = "false"
NUMBER         = <<[\-]?[0-9]+|[\-]?[0-9]*\.[0-9]+>>
IDENTIFIER     = <<[a-zA-Z_\%][a-zA-Z0-9_\-\?\%]*>>
WHITESPACE     = <<[ \t\r\n]+>> %ignore%
STRING         = <<(".*")|('.*')>>



//=============================================================
%productions%

Program = ( ProcessDef | ImportDef | ProcedureDef | Command )+ ;

Command =
     ControlStructure |
     ProcedureCall |
	  Assignment |
	  BuiltInCommand ;

Block = INDENT (Command)* DEDENT ;


//-------------------------------------------------------------
// Procedure Definitions
//-------------------------------------------------------------

ProcedureDef = ProcedureDeclaration Block ;

ProcedureDeclaration = "def" ProcedureName "(" [ FormalParamList ] ")" ":" ;

ImportDef = "import" ProcedureName "(" [ FormalParamList ] ")" ;

ProcedureName = IDENTIFIER ;

FormalParamList = FormalParam ( "," FormalParam )* ;

FormalParam = IDENTIFIER ;


//-------------------------------------------------------------
// Process Definitions
//-------------------------------------------------------------

ProcessDef = "process" ProcessName ":" Block ;

ProcessName = IDENTIFIER ;

     
//-------------------------------------------------------------
// Control Structures
//-------------------------------------------------------------

ControlStructure = WhileLoop ;

WhileLoop = "while" WhileCondition ":" ( Command | Block ) ;

WhileCondition = Expression ;


//-------------------------------------------------------------
// Procedure Calls
//-------------------------------------------------------------

ProcedureCall = FunctionCall ;

FunctionCall = IDENTIFIER "(" [ ActualParamList ] ")" ;

ActualParamList = Expression ( "," Expression )* ;


//-------------------------------------------------------------
// Assignments
//-------------------------------------------------------------

Assignment = IDENTIFIER ASSIGN Expression ;

//-------------------------------------------------------------
// Built-in Commands
//-------------------------------------------------------------

BuiltInCommand = WaitCommand |
                 PrintCommand |
                 TraceCommand |
                 StartCommand |
                 StopCommand ;

WaitCommand = "wait" Expression ;

PrintCommand = "print" ( Expression | STRING ) ;

TraceCommand = "trace" Expression ;

StartCommand = "start" IDENTIFIER ;

StopCommand = "stop" [ IDENTIFIER ] ;


//-------------------------------------------------------------
// Expressions 
//-------------------------------------------------------------

VariableName = IDENTIFIER ;

Expression = ExFunction | ExAtom ;

ExFunction = BinaryFunction | UnaryFunction ;

BinaryFunction = ExTerm BinaryOperator ExTerm ;

BinaryOperator = "and" | "or" |
                 "*" | "/" | "+" | "-" |
                 ">" | "<" | ">=" | "<=" | "!=" | "==" ;

UnaryFunction = "not" ExTerm ;

ExTerm = ExAtom | "(" Expression ")" | FunctionCall ;

ExAtom = "true" | "false" | NUMBER | VariableName ;
